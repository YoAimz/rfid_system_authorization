import aiohttp
import asyncio
from datetime import datetime
import logging

class VulnerabilityScanner:
    def __init__(self, card_manager):
        self.card_manager = card_manager
        self.logger = logging.getLogger(__name__)
        
    async def scan_system(self):
        """Run system scan"""
        vulnerabilities = []
        
        # Check certificates
        cert_issues = await self.check_certificates()
        vulnerabilities.extend(cert_issues)
        
        # Check configuration
        config_issues = self.check_configuration()
        vulnerabilities.extend(config_issues)
        
        # Check access patterns
        access_issues = await self.check_access_patterns()
        vulnerabilities.extend(access_issues)
        
        # Log results
        self.log_scan_results(vulnerabilities)
        return vulnerabilities
        
    async def check_certificates(self):
        """Check certificates"""
        issues = []
        try:
            # Check certificate expiry
            certs = self.card_manager.get_all_certificates()
            for cert in certs:
                if (cert['expiry_date'] - datetime.now()).days < 30:
                    issues.append({
                        'type': 'certificate_expiring',
                        'severity': 'high',
                        'description': f"Certificate {cert['id']} expires soon"
                    })
        except Exception as e:
            self.logger.error(f"Certificate check failed: {e}")
        return issues
        
    def check_configuration(self):
        """Check system configuration"""
        issues = []
        # Check security settings
        if not self.check_tls_version():
            issues.append({
                'type': 'weak_tls',
                'severity': 'high',
                'description': 'TLS version below recommended'
            })
        return issues
        
    async def check_access_patterns(self):
        """Analyze access patterns"""
        issues = []
        try:
            # Find suspicious patterns
            patterns = await self.analyze_access_logs()
            for pattern in patterns:
                if pattern['risk_score'] > 0.7:
                    issues.append({
                        'type': 'suspicious_access',
                        'severity': 'medium',
                        'description': pattern['description']
                    })
        except Exception as e:
            self.logger.error(f"Access pattern check failed: {e}")
        return issues